FREE_THROWS_ATTEMPTS=mean(FREE_THROWS_ATTEMPTS),
ASSISTS = mean(ASSISTS),
TURNOVERS=mean(TURNOVERS),
POINTS=mean(POINTS),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(sg_sf= ifelse(grepl("SG-SF",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(sg_pf=ifelse(grepl("SG-PF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(sg_pg=ifelse(grepl("SG-PG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(sg_c=ifelse(grepl("SG-C",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
# select a few columns and prepare the data for cluster analysis
# if the player has played shooting-guard and smallforward he is given a value of 1 in a separate column
# likewise do it for sg-pf, sg-pg
shootingGuards <- shootingGuardsPrevious5years %>%
select(GAMES, GAMES_STARTED, MINUTES_PLAYED, FIELD_GOALS, FIELD_GOALS_ATTEMPTS, TWO_POINTS_FG, TWO_POINTS_FG_ATTEMPTS,
THREE_POINTS_FG, THREE_POINTS_FG_ATTEMPTS, EFF_FIELD_GOAL_PERCENT, FREE_THROWS, FREE_THROWS_ATTEMPTS,
ASSISTS, TURNOVERS, POINTS)
# in order to decide which variables to keep and which not to
# here we perform co-relational analysis using the Hmisc library
correlation <- rcorr(as.matrix(shootingGuards))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
corrplot(correlation$r, type="upper", order="hclust", tl.col="black", tl.srt=45)
dev.off()
#some of the variables that were identified to remove are as follows
# FG_Attempted
# Field_Goals
# 3PFGA
# FTA
# 2PFGA
features <- shootingGuardsPrevious5years %>%
select(-c(PLAYER_ID,FIELD_GOALS, FIELD_GOALS_ATTEMPTS, THREE_POINTS_FG_ATTEMPTS, FREE_THROWS_ATTEMPTS, TWO_POINTS_FG_ATTEMPTS)) %>%
mutate(
GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),
THREE_POINTS_FG = (THREE_POINTS_FG - mean(THREE_POINTS_FG)) / sd(THREE_POINTS_FG),
FREE_THROWS = (FREE_THROWS - mean(FREE_THROWS)) / sd(FREE_THROWS),
TWO_POINTS_FG = (TWO_POINTS_FG - mean(TWO_POINTS_FG)) / sd(TWO_POINTS_FG),
ASSISTS = (ASSISTS - mean(ASSISTS)) / sd(ASSISTS),
TURNOVERS = (TURNOVERS - mean(TURNOVERS)) / sd(TURNOVERS),
POINTS = (POINTS - mean(POINTS)) / sd(POINTS)
) %>%
select(-c(SALARY))
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
print(plotFrame)
# This is determined from the elbow graph
finalNumberOfClusters = 3
membersOfClusters <- list()
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
print(comparison)
#The conclusion here is using the two packages are same
# The difference is fpc gives the best number of clusters using the silhouette method
# We have calculated using the elbow method
# however we chose the elbow graph method because number of cluster being 3 achieved better
# between group sum of squares being large means better in terms of making a judgement
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, shootingGuardsPrevious5years)
mean_matrix <- getMeanMatrix(membersOfClusters)
#consider points variable - since shooting guard needs to score more and should have a better three point game
topPointAttributes  <- getTopPlayersForAnAttribute(shootingGuardsPrevious5years, finalNumberOfClusters, "POINTS", membersOfClusters)
topAssistAttributes <- getTopPlayersForAnAttribute(shootingGuardsPrevious5years, finalNumberOfClusters, "ASSISTS", membersOfClusters)
topThreePointersAttributes <- getTopPlayersForAnAttribute(shootingGuardsPrevious5years,finalNumberOfClusters, "THREE_POINTS_FG", membersOfClusters)
topPointsClusterPercentages <- topPointAttributes$percentages
topAssistsClusterPerecentages <- topAssistAttributes$percentages
topThreePointerClusterPercentages <- topThreePointersAttributes$percentages
bestPlayersPercentagesInEachCluster <- data.frame(points = topPointsClusterPercentages, assists=topAssistsClusterPerecentages, threepointers=topThreePointerClusterPercentages)
print(bestPlayersPercentagesInEachCluster)
#This clearly justifies the high quality of the players in the clusters
# The best cluster has 100%  of the top 10% good shooters
# The best cluster has 77.77% if the top 10% good passers
# The number of best three pointers are shared between two of them
# now look at the best cluster
# calcluate the mean and the stanadard deviation of the salaries in that cluster
# select someone who is a good shooter but is being paid less
# This will be a good pick for the boss
# player with id 2898 has top 10% skills in points scoring and is in top 10% in assists
# he is paid around 3 million less than the mean of salaries in that cluster
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$points)
meanSalaryBestCluster <- mean(membersOfClusters[[bestCluster]]$SALARY)
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(ASSISTS > topAssistAttributes$score, POINTS > topPointAttributes$score, SALARY < meanSalaryBestCluster)
print(makeAnOffer)
View(makeAnOffer)
View(makeAnOffer)
# This is for the point guard position in the NBA
# They are small tiny and fast enough
# They are valued more for their assits rather than the points
# What matters for the point guard is the assist-turnover ratio
# They should have a reasonable jump shot
library('RSQLite')
library('dplyr')
library('Hmisc')
library('corrplot')
library('ggplot2')
library('fpc')
source("utils.R")
basketballDb <- dbConnect(SQLite(), "/Users/abhinav/Abhinav/howba/app/src/gp1/db/basketBall.db")
sqlStatement  <- "SELECT * FROM PG_PREVIOUS5YEARS"
playerStats <- dbGetQuery(basketballDb, sqlStatement)
playerStats <- tbl_df(playerStats)
playerStats <- playerStats %>%
select(-c(SEQ_NO)) %>%
group_by(PLAYER_ID) %>%
summarise(GAMES= mean(GAMES),
GAMES_STARTED=mean(GAMES_STARTED),
MINUTES_PLAYED = mean(MINUTES_PLAYED),
THREE_POINTS_FG = mean(THREE_POINTS_FG),
THREE_POINTS_FG_ATTEMPTS = mean(THREE_POINTS_FG_ATTEMPTS),
EFF_FIELD_GOAL_PERCENT = mean(EFF_FIELD_GOAL_PERCENT),
FREE_THROWS=mean(FREE_THROWS),
FREE_THROWS_ATTEMPTS=mean(FREE_THROWS_ATTEMPTS),
ASSIST_TURNOVER_RATIO= mean(ASSISTS/TURNOVERS, na.rm=TRUE),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(pg_sf= ifelse(grepl("PG-SF",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(pg_pf=ifelse(grepl("PG-PF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(pg_sg=ifelse(grepl("PG-SG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(pg_c=ifelse(grepl("PG-C",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
playerStats$ASSIST_TURNOVER_RATIO[is.na(playerStats$ASSIST_TURNOVER_RATIO)] <- 0
playerStats$ASSIST_TURNOVER_RATIO[is.infinite(playerStats$ASSIST_TURNOVER_RATIO)] <- 0
pgAttributes <- playerStats %>%
select(-(PLAYER_ID))
# among the attributes that are selected find the correlations between then
correlation <- rcorr(as.matrix(pgAttributes))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
# corrplot(correlation$r, type="upper", order="hclust", tl.col="black", tl.srt=45)
# From the correlation matrix we find that
# THREE_POINTS_FG and THREE_POINTS_FG_ATTEMPTS
# FREE_THROWS AND FREE_THROWS_ATTEMPTS
# are correlated
features <- pgAttributes %>%
select(-c(THREE_POINTS_FG_ATTEMPTS, FREE_THROWS_ATTEMPTS, SALARY)) %>%
mutate(GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),
THREE_POINTS_FG = (THREE_POINTS_FG - mean(THREE_POINTS_FG)) / sd(THREE_POINTS_FG),
FREE_THROWS = (FREE_THROWS - mean(FREE_THROWS)) / sd(FREE_THROWS),
ASSIST_TURNOVER_RATIO = (ASSIST_TURNOVER_RATIO - mean(ASSIST_TURNOVER_RATIO)) / sd(ASSIST_TURNOVER_RATIO)
)
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
finalNumberOfClusters = 3
membersOfClusters <- list()
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, playerStats)
mean_matrix <- getMeanMatrix(membersOfClusters)
topAssistsTurnOverRatioAttrbiutes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "ASSIST_TURNOVER_RATIO", membersOfClusters)
topThreePointersAttributes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "THREE_POINTS_FG", membersOfClusters)
bestPlayersPercentagesInEachCluster <- data.frame(assistsTurnOverRatio=topAssistsTurnOverRatioAttrbiutes$percentages, scores=topThreePointersAttributes$percentages)
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$assistsTurnOverRatio)
meanSalaryBestCluster <- membersOfClusters[[bestCluster]]
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(ASSIST_TURNOVER_RATIO > topAssistsTurnOverRatioAttrbiutes$score)
print(makeAnOffer)
#player id 568
View(makeAnOffer)
# small forwards are the most versatile
# they need to be prolific scorers
# They have defense responsibilities offensive and defensive rebounds
# They are fouled against more and they need to have good free throw skills
# Their height should be between 6.6 to 6.9
library('RSQLite') # Loads the pacakges that is reqiured for reading from the sql database
library('dplyr') # perform operations on data frame
library('Hmisc')
library('corrplot')
library('ggplot2')
library('cluster')
library('LICORS')
library('fpc')
source('utils.R')
basketballDb <- dbConnect(SQLite(), "/Users/abhinav/Abhinav/howba/app/src/gp1/db/basketBall.db")
sqlStatement  <- "SELECT * FROM SF_PREVIOUS5YEARS"
playerStats <- dbGetQuery(basketballDb, sqlStatement)
playerStats <- tbl_df(playerStats)
playerStats <- playerStats %>%
select(-c(SEQ_NO)) %>%
group_by(PLAYER_ID) %>%
summarise(GAMES= mean(GAMES),
GAMES_STARTED=mean(GAMES_STARTED),
MINUTES_PLAYED = mean(MINUTES_PLAYED),
FIELD_GOALS = mean(FIELD_GOALS),
FIELD_GOALS_ATTEMPTS= mean(FIELD_GOALS_ATTEMPTS),
TWO_POINTS_FG = mean(TWO_POINTS_FG),
TWO_POINTS_FG_ATTEMPTS = mean(TWO_POINTS_FG_ATTEMPTS),
EFF_FIELD_GOAL_PERCENT = mean(EFF_FIELD_GOAL_PERCENT),
FREE_THROWS=mean(FREE_THROWS),
FREE_THROWS_ATTEMPTS=mean(FREE_THROWS_ATTEMPTS),
OFFENSIVE_REBOUNDS = mean(OFFESNIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = mean(DEFENSIVE_REBOUNDS),
BLOCKS = mean(BLOCKS),
POINTS=mean(POINTS),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(sf_sg= ifelse(grepl("SF-SG",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(sf_pf=ifelse(grepl("SF-PF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(sf_pg=ifelse(grepl("SF-PG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(sf_c=ifelse(grepl("SF-C",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
sfAttributes <- playerStats %>%
select(-(PLAYER_ID))
# among the attributes that are selected find the correlations between then
correlation <- rcorr(as.matrix(sfAttributes))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
corrplot(correlation$r, type="upper", order="hclust", tl.col="black", tl.srt=45)
#from the correlation matrix we identify that the these variables be removed
# FIELD_GOALS_ATTEMPTS
# TWO_POINTS_FG_ATTEMPTS
# TWO_POINTS_FG
# TWO_POINTS_FG_ATTEMPTS
# FREE_THROWS_ATTEMPTS
# FIELD_GOALS
features <- sfAttributes %>%
select(-c(FIELD_GOALS_ATTEMPTS, TWO_POINTS_FG_ATTEMPTS, TWO_POINTS_FG, TWO_POINTS_FG_ATTEMPTS, FREE_THROWS_ATTEMPTS,
FIELD_GOALS, SALARY)) %>%
mutate(GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),
FREE_THROWS = (FREE_THROWS - mean(FREE_THROWS)) / sd(FREE_THROWS),
OFFENSIVE_REBOUNDS = (OFFENSIVE_REBOUNDS -mean(OFFENSIVE_REBOUNDS)) / sd(OFFENSIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = (DEFENSIVE_REBOUNDS -mean(DEFENSIVE_REBOUNDS)) / sd(DEFENSIVE_REBOUNDS),
BLOCKS = (BLOCKS -mean(BLOCKS)) / sd(BLOCKS),
POINTS = (POINTS -mean(POINTS)) / sd(POINTS)
)
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
finalNumberOfClusters = 3
membersOfClusters <- list()
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, playerStats)
mean_matrix <- getMeanMatrix(membersOfClusters)
topScorePlayersAttrbiutes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "POINTS", membersOfClusters)
topOffensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "OFFENSIVE_REBOUNDS", membersOfClusters)
topDefensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "DEFENSIVE_REBOUNDS", membersOfClusters)
bestPlayersPercentagesInEachCluster <- data.frame(points=topScorePlayersAttrbiutes$percentages, ofrb=topOffensiveReboundsAttributes$percentages, dfrb=topDefensiveReboundsAttributes$percentages)
print(bestPlayersPercentagesInEachCluster)
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$dfrb)
meanSalaryBestCluster <- mean(membersOfClusters[[bestCluster]]$SALARY)
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(POINTS >topScorePlayersAttrbiutes$score, DEFENSIVE_REBOUNDS > topDefensiveReboundsAttributes$score,SALARY <= meanSalaryBestCluster)
print(makeAnOffer)
View(makeAnOffer)
# power forwards should have these attributes typically
# they should have 2point capabilities
# they should be defensive - good rebounds offensively and defensively
# they should have good blocks
library('RSQLite') # Loads the pacakges that is reqiured for reading from the sql database
library('dplyr') # perform operations on data frame
library('Hmisc')
library('corrplot')
library('ggplot2')
library('cluster')
library('LICORS')
library('fpc')
source('utils.R')
sketballDb <- dbConnect(SQLite(), "/Users/abhinav/Abhinav/howba/app/src/gp1/db/basketBall.db")
sqlStatement  <- "SELECT * FROM PF_PREVIOUS5YEARS"
playerStats <- dbGetQuery(basketballDb, sqlStatement)
playerStats <- tbl_df(playerStats)
playerStats <- playerStats %>%
group_by(PLAYER_ID) %>%
summarise(GAMES= mean(GAMES),
GAMES_STARTED=mean(GAMES_STARTED),
MINUTES_PLAYED = mean(MINUTES_PLAYED),
TWO_POINTS_FG = mean(TWO_POINTS_FG),
TWO_POINTS_FG_ATTEMPTS= mean(TWO_POINTS_FG_ATTEMPTS),
EFF_FIELD_GOAL_PERCENT = mean(EFF_FIELD_GOAL_PERCENT),
OFFENSIVE_REBOUNDS = mean(OFFESNIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = mean(DEFENSIVE_REBOUNDS),
BLOCKS = mean(BLOCKS),
POINTS=mean(POINTS),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(pf_sg= ifelse(grepl("PF-SG",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(pf_sf=ifelse(grepl("PF-SF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(pf_pg=ifelse(grepl("PF-PG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(pf_c=ifelse(grepl("PF-C",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
pfAttributes <- playerStats %>%
select(-(PLAYER_ID))
# among the attributes that are selected find the correlations between then
correlation <- rcorr(as.matrix(pfAttributes))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
#from the correlation matrix we identify that the these variables be removed
# TWO_POINTS_FG_ATTEMPTS
# TWO_POINTS_FG
features <- pfAttributes %>%
select(-c(TWO_POINTS_FG_ATTEMPTS, TWO_POINTS_FG, SALARY)) %>%
mutate(GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),
OFFENSIVE_REBOUNDS = (OFFENSIVE_REBOUNDS -mean(OFFENSIVE_REBOUNDS)) / sd(OFFENSIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = (DEFENSIVE_REBOUNDS -mean(DEFENSIVE_REBOUNDS)) / sd(DEFENSIVE_REBOUNDS),
BLOCKS = (BLOCKS -mean(BLOCKS)) / sd(BLOCKS),
POINTS = (POINTS -mean(POINTS)) / sd(POINTS)
)
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
print(plotFrame)
finalNumberOfClusters = 3
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, playerStats)
mean_matrix <- getMeanMatrix(membersOfClusters)
topTwoPointScorerAttrbiutes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "TWO_POINTS_FG", membersOfClusters)
topOffensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "OFFENSIVE_REBOUNDS", membersOfClusters)
topDefensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "DEFENSIVE_REBOUNDS", membersOfClusters)
bestPlayersPercentagesInEachCluster = data.frame(twoPointers= topTwoPointScorerAttrbiutes$percentages, ofrb=topOffensiveReboundsAttributes$percentages,
dfrb=topDefensiveReboundsAttributes$percentages)
print(bestPlayersPercentagesInEachCluster)
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$dfrb)
meanSalaryBestCluster <- mean(membersOfClusters[[bestCluster]]$SALARY)
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(DEFENSIVE_REBOUNDS > topDefensiveReboundsAttributes$score,
OFFENSIVE_REBOUNDS >  topOffensiveReboundsAttributes$score,
TWO_POINTS_FG > topTwoPointScorerAttrbiutes$score,
SALARY <= meanSalaryBestCluster)
print(makeAnOffer)
View(makeAnOffer)
View(makeAnOffer)
View(makeAnOffer)
library('RSQLite') # Loads the pacakges that is reqiured for reading from the sql database
library('dplyr') # perform operations on data frame
library('Hmisc')
library('corrplot')
library('ggplot2')
library('cluster')
library('LICORS')
library('fpc')
source('utils.R')
basketballDb <- dbConnect(SQLite(), "/Users/abhinav/Abhinav/howba/app/src/gp1/db/basketBall.db")
sqlStatement  <- "SELECT * FROM PF_PREVIOUS5YEARS"
playerStats <- dbGetQuery(basketballDb, sqlStatement)
playerStats <- tbl_df(playerStats)
playerStats <- playerStats %>%
group_by(PLAYER_ID) %>%
summarise(GAMES= mean(GAMES),
GAMES_STARTED=mean(GAMES_STARTED),
MINUTES_PLAYED = mean(MINUTES_PLAYED),
TWO_POINTS_FG = mean(TWO_POINTS_FG),
TWO_POINTS_FG_ATTEMPTS= mean(TWO_POINTS_FG_ATTEMPTS),
EFF_FIELD_GOAL_PERCENT = mean(EFF_FIELD_GOAL_PERCENT),
OFFENSIVE_REBOUNDS = mean(OFFESNIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = mean(DEFENSIVE_REBOUNDS),
BLOCKS = mean(BLOCKS),
POINTS=mean(POINTS),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(C_SG= ifelse(grepl("C-SG",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(C_sf=ifelse(grepl("C-SF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(c_pg=ifelse(grepl("C-PG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(c_pf=ifelse(grepl("C-PF",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
cAttributes <- playerStats %>%
select(-(PLAYER_ID))
# among the attributes that are selected find the correlations between then
correlation <- rcorr(as.matrix(cAttributes))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
corrplot(correlation$r, type="upper", order="hclust", tl.col="black", tl.srt=45)
#from the correlation matrix we identify that the these variables be removed
# TWO_POINTS_FG_ATTEMPTS
# TWO_POINTS_FG
features <- cAttributes %>%
select(-c(TWO_POINTS_FG_ATTEMPTS, TWO_POINTS_FG, SALARY)) %>%
mutate(GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),#            #
OFFENSIVE_REBOUNDS = (OFFENSIVE_REBOUNDS -mean(OFFENSIVE_REBOUNDS)) / sd(OFFENSIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = (DEFENSIVE_REBOUNDS -mean(DEFENSIVE_REBOUNDS)) / sd(DEFENSIVE_REBOUNDS),
BLOCKS = (BLOCKS -mean(BLOCKS)) / sd(BLOCKS),
POINTS = (POINTS -mean(POINTS)) / sd(POINTS)
)
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
print(plotFrame)
finalNumberOfClusters = 3
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, playerStats)
mean_matrix <- getMeanMatrix(membersOfClusters)
topTwoPointScorerAttrbiutes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "TWO_POINTS_FG", membersOfClusters)
topOffensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "OFFENSIVE_REBOUNDS", membersOfClusters)
topDefensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "DEFENSIVE_REBOUNDS", membersOfClusters)
topBlocksAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "BLOCKS", membersOfClusters)
bestPlayersPercentagesInEachCluster = data.frame(twoPointers= topTwoPointScorerAttrbiutes$percentages, ofrb=topOffensiveReboundsAttributes$percentages,
dfrb=topDefensiveReboundsAttributes$percentages, blocks=topBlocksAttributes$percentages)
print(bestPlayersPercentagesInEachCluster)
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$dfrb)
meanSalaryBestCluster <- mean(membersOfClusters[[bestCluster]]$SALARY)
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(DEFENSIVE_REBOUNDS > topDefensiveReboundsAttributes$score,
OFFENSIVE_REBOUNDS >  topOffensiveReboundsAttributes$score,
BLOCKS > topBlocksAttributes$score,
SALARY < meanSalaryBestCluster)
print(makeAnOffer)
View(makeAnOffer)
View(makeAnOffer)
library('RSQLite') # Loads the pacakges that is reqiured for reading from the sql database
library('dplyr') # perform operations on data frame
library('Hmisc')
library('corrplot')
library('ggplot2')
library('cluster')
library('LICORS')
library('fpc')
source('utils.R')
basketballDb <- dbConnect(SQLite(), "/Users/abhinav/Abhinav/howba/app/src/gp1/db/basketBall.db")
sqlStatement  <- "SELECT * FROM C_PREVIOUS5YEARS"
playerStats <- dbGetQuery(basketballDb, sqlStatement)
playerStats <- tbl_df(playerStats)
playerStats <- playerStats %>%
group_by(PLAYER_ID) %>%
summarise(GAMES= mean(GAMES),
GAMES_STARTED=mean(GAMES_STARTED),
MINUTES_PLAYED = mean(MINUTES_PLAYED),
TWO_POINTS_FG = mean(TWO_POINTS_FG),
TWO_POINTS_FG_ATTEMPTS= mean(TWO_POINTS_FG_ATTEMPTS),
EFF_FIELD_GOAL_PERCENT = mean(EFF_FIELD_GOAL_PERCENT),
OFFENSIVE_REBOUNDS = mean(OFFESNIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = mean(DEFENSIVE_REBOUNDS),
BLOCKS = mean(BLOCKS),
POINTS=mean(POINTS),
SALARY=mean(SALARY),
POSITION=paste(POSITION, collapse=",")) %>%
mutate(C_SG= ifelse(grepl("C-SG",POSITION, fixed=TRUE), 1 ,0)) %>%
mutate(C_sf=ifelse(grepl("C-SF",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(c_pg=ifelse(grepl("C-PG",POSITION, fixed=TRUE), 1 ,0))%>%
mutate(c_pf=ifelse(grepl("C-PF",POSITION, fixed=TRUE), 1 ,0)) %>%
select(-c(POSITION))
cAttributes <- playerStats %>%
select(-(PLAYER_ID))
# among the attributes that are selected find the correlations between then
correlation <- rcorr(as.matrix(cAttributes))
correlationFlattened = flattenCorrelationMatrix(correlation$r, correlation$P)
corGreaterThan99 <- filter(correlationFlattened, cor>0.95)
print(corGreaterThan99)
corrplot(correlation$r, type="upper", order="hclust", tl.col="black", tl.srt=45)
#from the correlation matrix we identify that the these variables be removed
# TWO_POINTS_FG_ATTEMPTS
# TWO_POINTS_FG
features <- cAttributes %>%
select(-c(TWO_POINTS_FG_ATTEMPTS, TWO_POINTS_FG, SALARY)) %>%
mutate(GAMES = (GAMES - mean(GAMES))/sd(GAMES),
GAMES_STARTED = (GAMES_STARTED - mean(GAMES_STARTED))/sd(GAMES_STARTED),
MINUTES_PLAYED= (MINUTES_PLAYED - mean(MINUTES_PLAYED)) / sd(MINUTES_PLAYED),#            #
OFFENSIVE_REBOUNDS = (OFFENSIVE_REBOUNDS -mean(OFFENSIVE_REBOUNDS)) / sd(OFFENSIVE_REBOUNDS),
DEFENSIVE_REBOUNDS = (DEFENSIVE_REBOUNDS -mean(DEFENSIVE_REBOUNDS)) / sd(DEFENSIVE_REBOUNDS),
BLOCKS = (BLOCKS -mean(BLOCKS)) / sd(BLOCKS),
POINTS = (POINTS -mean(POINTS)) / sd(POINTS)
)
plotFrame <- getPlotFrame(features)
ggplot(plotFrame, aes(x=numClusters, y=sumOfSquares)) +
geom_point() +
geom_line()
print(plotFrame)
finalNumberOfClusters = 3
km <- kmeanspp(features, k=finalNumberOfClusters, start="random", iter.max = 100, nstart = 45)
kmeans <- kmeansruns(features, krange=2:10)
bestNumberOfClusters <- kmeans$bestk
comparison <- getComparisonBetweenKmeansppAndfpc(km, kmeans)
membersOfClusters <- getMembersOfClusters(features, finalNumberOfClusters, playerStats)
mean_matrix <- getMeanMatrix(membersOfClusters)
topTwoPointScorerAttrbiutes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "TWO_POINTS_FG", membersOfClusters)
topOffensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats,finalNumberOfClusters, "OFFENSIVE_REBOUNDS", membersOfClusters)
topDefensiveReboundsAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "DEFENSIVE_REBOUNDS", membersOfClusters)
topBlocksAttributes <- getTopPlayersForAnAttribute(playerStats, finalNumberOfClusters, "BLOCKS", membersOfClusters)
bestPlayersPercentagesInEachCluster = data.frame(twoPointers= topTwoPointScorerAttrbiutes$percentages, ofrb=topOffensiveReboundsAttributes$percentages,
dfrb=topDefensiveReboundsAttributes$percentages, blocks=topBlocksAttributes$percentages)
print(bestPlayersPercentagesInEachCluster)
bestCluster <- which.max(bestPlayersPercentagesInEachCluster$dfrb)
meanSalaryBestCluster <- mean(membersOfClusters[[bestCluster]]$SALARY)
makeAnOffer <- tbl_df(membersOfClusters[[bestCluster]]) %>%
filter(DEFENSIVE_REBOUNDS > topDefensiveReboundsAttributes$score,
OFFENSIVE_REBOUNDS >  topOffensiveReboundsAttributes$score,
BLOCKS > topBlocksAttributes$score,
SALARY < meanSalaryBestCluster)
print(makeAnOffer)
View(makeAnOffer)
